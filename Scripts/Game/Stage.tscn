[gd_scene load_steps=12 format=2]

[ext_resource path="res://Scripts/Game/Spawner/Spawner.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scripts/Game/Stage.gd" type="Script" id=2]
[ext_resource path="res://Resources/Fonts/NotoSansUI_Bold.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://Resources/Fonts/m5x7.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://Resources/Textures/Stage/StageForeground.png" type="Texture" id=5]

[sub_resource type="Gradient" id=1]
offsets = PoolRealArray( 0, 0.180645, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0.858065, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=2]
gradient = SubResource( 1 )

[sub_resource type="DynamicFont" id=3]
size = 224
font_data = ExtResource( 4 )

[sub_resource type="DynamicFont" id=4]
size = 33
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float AMT = 0.2;
uniform float SPEED = 0.6;


float random2d(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float randomRange (in vec2 seed, in float min, in float max) {
	return min + random2d(seed) * (max - min);
}

float insideRange(float v, float bottom, float top) {
	return step(bottom, v) - step(top, v);
}
   
void fragment()
{
	float time = floor(TIME * SPEED * 60.0);    
	vec2 uv = SCREEN_UV;
	
	vec3 outCol = texture(SCREEN_TEXTURE, uv).rgb;
	
	float maxOffset = AMT/2.0;
	for (float i = 0.0; i < 10.0 * AMT; i += 1.0) {
		float sliceY = random2d(vec2(time , 2345.0 + float(i)));
		float sliceH = random2d(vec2(time , 9035.0 + float(i))) * 0.25;
		float hOffset = randomRange(vec2(time , 9625.0 + float(i)), -maxOffset, maxOffset);
		vec2 uvOff = uv;
		uvOff.x += hOffset;
		if (insideRange(uv.y, sliceY, fract(sliceY+sliceH)) == 1.0 ){
			outCol = texture(SCREEN_TEXTURE, uvOff).rgb;
		}
	}
	
	float maxColOffset = AMT/6.0;
	float rnd = random2d(vec2(time , 9545.0));
	vec2 colOffset = vec2(randomRange(vec2(time , 9545.0),-maxColOffset,maxColOffset), 
						  randomRange(vec2(time , 7205.0),-maxColOffset,maxColOffset));
	if (rnd < 0.33) {
		outCol.r = texture(SCREEN_TEXTURE, uv + colOffset).r;
    }
	else if (rnd < 0.66) {
		outCol.g = texture(SCREEN_TEXTURE, uv + colOffset).g;
    }
	else {
		outCol.b = texture(SCREEN_TEXTURE, uv + colOffset).b;  
    }
	COLOR = vec4(outCol,1.0);
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/AMT = 0.0
shader_param/SPEED = 0.6

[node name="Stage" type="Control"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -360.0
margin_top = -640.0
margin_right = 360.0
margin_bottom = 640.0
mouse_filter = 2
script = ExtResource( 2 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="."]

[node name="ColorBg" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -1962.0
margin_bottom = 1963.0
mouse_filter = 2
color = Color( 0.168627, 0.141176, 0.176471, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Background" type="TextureRect" parent="."]
margin_top = -641.0
margin_right = 720.0
margin_bottom = 1922.0
mouse_filter = 2
texture = ExtResource( 5 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Spawner" parent="." instance=ExtResource( 1 )]

[node name="TextureRect" type="TextureRect" parent="."]
modulate = Color( 0, 0, 0, 0.470588 )
margin_left = 583.0
margin_top = 314.0
margin_right = 910.0
margin_bottom = 760.0
rect_rotation = 89.9999
mouse_filter = 2
texture = SubResource( 2 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GaugeBackground" type="ColorRect" parent="."]
margin_top = -838.0
margin_right = 720.0
margin_bottom = 314.0
color = Color( 0.096, 0.08, 0.1, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GaugeDisplay" type="Label" parent="."]
modulate = Color( 0, 1, 0, 1 )
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_top = -621.0
margin_bottom = -381.0
custom_fonts/font = SubResource( 3 )
text = "100"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="StreamArea" type="ReferenceRect" parent="."]
visible = false
margin_left = 140.0
margin_right = 580.0
margin_bottom = 1280.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="."]
visible = false
margin_top = 769.889
margin_right = 131.0
margin_bottom = 962.889
custom_fonts/font = SubResource( 4 )
text = "Gauge:
Time:
Chance:
Speed:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GlitchFilter" type="ColorRect" parent="."]
visible = false
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -838.0
margin_bottom = 838.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}
